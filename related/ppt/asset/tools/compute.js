// Generated by CoffeeScript 1.9.3
(function() {
  var Array2D, DATA, _fs, _path, countries, countriesTran, defineWrapper, filterOriginData, incomeArr, lifeExpectancyArr, output, outputPath, populationArr, scatterData, timeline, timelineTran, util;

  _fs = require('fs');

  _path = require('path');

  Array2D = require('../common/Array2D');

  DATA = require('./data');

  util = require('./JoinUtil');

  outputPath = _path.resolve(__dirname, './gapminder.json.js');

  countries = ['Country', 'China', 'United States', 'United Kingdom', 'Russia', 'India', 'France', 'Germany', 'Australia', 'Canada', 'Cuba', 'Finland', 'Iceland', 'Japan', 'North Korea', 'South Korea', 'New Zealand', 'Norway', 'Poland', 'Turkey'];

  countriesTran = countries.map(function(item) {
    return [item];
  });

  timeline = DATA.population[0].slice();

  timelineTran = timeline.map(function(item) {
    return [item];
  });


  /*
      过滤原始数据, 根据国家名以及时间过滤
   */

  filterOriginData = function(data) {
    var tempArr;
    tempArr = util.innerJoin(data, countriesTran);
    tempArr = Array2D.transpose(tempArr);
    tempArr = util.innerJoin(tempArr, timelineTran);
    return Array2D.transpose(tempArr);
  };

  incomeArr = filterOriginData(DATA.incomes);

  lifeExpectancyArr = filterOriginData(DATA.lifeExpectancy);

  populationArr = filterOriginData(DATA.population);

  scatterData = [];

  Array2D.eachRow(incomeArr, function(row, rIndex) {
    if (rIndex > 0) {
      return row.forEach(function(cell, i) {
        var base, item, x, y;
        if (i > 0) {
          x = i - 1;
          y = rIndex - 1;
          if (scatterData[x] == null) {
            scatterData[x] = [];
          }
          if ((base = scatterData[x])[y] == null) {
            base[y] = [];
          }
          item = scatterData[x][y];
          item.push(cell);
          item.push(lifeExpectancyArr[rIndex][i]);
          item.push(populationArr[rIndex][i]);
          item.push(row[0]);
          return item.push(incomeArr[0][i]);
        }
      });
    }
  });

  output = {
    counties: countries.slice(1),
    timeline: timeline.slice(1),
    series: scatterData
  };

  defineWrapper = function(json) {
    var jsonString;
    jsonString = JSON.stringify(json);
    return 'define(' + jsonString + ');';
  };

  _fs.writeFile(outputPath, defineWrapper(output, function(error) {
    if (error) {
      return console.log(error);
    } else {
      return console.log('OK!');
    }
  }));

}).call(this);

//# sourceMappingURL=compute.js.map
