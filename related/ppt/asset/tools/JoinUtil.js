// Generated by CoffeeScript 1.9.3
(function() {
  var ASSERT_TYPE, Array2D, OPT_CONFIG, _, assert, utils;

  Array2D = require('../common/Array2D');

  _ = require('../common/lodash');

  ASSERT_TYPE = {
    TYPE: 'TYPE',
    RANGE: 'RANGE'
  };

  OPT_CONFIG = {
    RESERVE_ALL: 'all',
    RESERVE_LEFT: 'left',
    RESERVE_RIGHT: 'right'
  };

  assert = function(message, type) {
    if (type == null) {
      type = '';
    }
    switch (type.toUpperCase()) {
      case ASSERT_TYPE.TYPE:
        throw TypeError(message);
        break;
      case ASSERT_TYPE.RANGE:
        throw RangeError(message);
        break;
      default:
        throw Error(message);
    }
  };

  utils = {

    /*
        Inner-join
        @param {Array<array>} tableOne 2D-Array
        @param {Array<array>} tableTwo 2D-Array
        @param {number} tableOneCol index column of Join-key. optional, default: 0
        @param {number} tableOneCol index column of Join-key. optional, default: 0
        @param {Object} options
        @option {string} witch table should be reserved
     */
    innerJoin: function(tableOne, tableTwo, tableOneCol, tableTwoCol, options) {
      var colOne, colOneHead, colTowHead, colTwo, column, combineTable, joinTable, sharedCol;
      if (tableOneCol == null) {
        tableOneCol = 0;
      }
      if (tableTwoCol == null) {
        tableTwoCol = 0;
      }
      if (options == null) {
        options = {
          reserve: OPT_CONFIG.RESERVE_LEFT
        };
      }
      if (!Array2D.check(tableOne || !Array2D.check(tableTwo))) {
        assert('Type error!', ASSERT_TYPE.TYPE);
      }
      colOne = Array2D.column(tableOne, tableOneCol);
      colTwo = Array2D.column(tableTwo, tableTwoCol);
      colOneHead = colOne[0];
      colTowHead = colTwo[0];
      sharedCol = _.intersection(colOne.slice(1), colTwo.slice(1));
      combineTable = [];
      switch (options.reserve) {
        case OPT_CONFIG.RESERVE_LEFT:
          combineTable = [tableOne];
          column = tableOneCol;
          break;
        case OPT_CONFIG.RESERVE_RIGHT:
          combineTable = [tableTwo];
          column = tableTwoCol;
      }
      joinTable = [];
      combineTable.forEach(function(table) {
        return Array2D.eachRow(table, function(row, rIndex) {
          if (rIndex !== 0) {
            if (sharedCol.indexOf(row[column]) > -1) {
              return joinTable.push(row);
            }
          } else {
            return joinTable.push(row);
          }
        });
      });
      return joinTable;
    }
  };

  module.exports = utils;

}).call(this);

//# sourceMappingURL=JoinUtil.js.map
