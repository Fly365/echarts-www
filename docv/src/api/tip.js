// Generated by CoffeeScript 1.9.2
define(function(require) {
  var CLZ, DATA_TIMER, HIDE_DELAY, _, exports, helper, listTemplate, templateContent;
  _ = require('lodash');
  helper = require('./helper');
  CLZ = {
    LOCK: 'popover-lock',
    ITEM: '.mark-item',
    POP: '.popover'
  };
  HIDE_DELAY = 200;
  DATA_TIMER = 'timer';
  templateContent = function(data) {
    return "<div class='popover' role='tooltip'> <div class='arrow'></div> <div class='title-bar clearfix'> <h3 class='popover-title'></h3> <span class='" + CLZ.LOCK + " icon-lock-open '></span> </div> <div class='popover-list clearfix'> " + (listTemplate(data.list)) + " </div> </div>";
  };
  listTemplate = function(list) {
    if (list.length) {
      return "<div>" + _.map(list, function(item) {
        return "<a class='list-item' href='javascript:void(0)' data-query=" + item.query + ">" + item.desc + "</a>";
      }).join('') + "</div>";
    } else {
      return '';
    }
  };
  exports = {};
  exports.wrap = function(eles) {
    return _.each(eles, function(ele) {
      var data;
      data = $(ele).mark('getData');
      return $(ele).popover({
        'toggle': 'popover',
        'placement': 'bottom',
        'title': data.title,
        'trigger': 'manual',
        'animation': false,
        template: templateContent(data)
      });
    });
  };
  exports.bindEvent = function(layout) {
    layout = $(layout);
    layout.on('mouseenter', CLZ.ITEM, function(event) {
      var item, timer;
      item = $(this);
      timer = item.data(DATA_TIMER);
      if (!timer) {
        return item.popover('show');
      } else {
        return clearTimeout(timer) && item.removeData(DATA_TIMER);
      }
    });
    layout.on('mouseleave', CLZ.ITEM, function(event) {
      var item, timer;
      item = $(this);
      timer = setTimeout(function() {
        if (!item.data(CLZ.LOCK)) {
          item.popover('hide');
        }
        return item.removeData(DATA_TIMER);
      }, HIDE_DELAY);
      return item.data(DATA_TIMER, timer);
    });
    layout.on('mouseenter', CLZ.POP, function(event) {
      var item, self;
      self = $(this);
      item = self.prev(CLZ.ITEM);
      return clearTimeout(item.data(DATA_TIMER)) && item.removeData(DATA_TIMER);
    });
    layout.on('mouseleave', CLZ.POP, function(event) {
      var item, self, timer;
      self = $(this);
      item = self.prev(CLZ.ITEM);
      timer = setTimeout(function() {
        if (!item.data(CLZ.LOCK)) {
          item.popover('hide');
        }
        return item.removeData(DATA_TIMER);
      }, HIDE_DELAY);
      return item.data(DATA_TIMER, timer);
    });
    layout.on('click', '.' + CLZ.LOCK, function(event) {
      var item, self;
      self = $(this);
      self.toggleClass('icon-lock-open icon-lock-closed');
      item = self.parents(CLZ.POP).prev(CLZ.ITEM);
      return item.data(CLZ.LOCK, !!self.hasClass('icon-lock-closed'));
    });
    return layout.on('click', '.popover-list a', function(event) {
      var self;
      self = $(this);
      return helper.hashRoute({
        queryString: self.attr('data-query') || ''
      });
    });
  };
  return exports;
});
